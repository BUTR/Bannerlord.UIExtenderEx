{
  "api/Bannerlord.UIExtenderEx.Attributes.BaseUIExtenderAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Attributes.BaseUIExtenderAttribute.html",
    "title": "Class BaseUIExtenderAttribute | UIExtenderEx Documentation",
    "summary": "Class BaseUIExtenderAttribute Namespace Bannerlord.UIExtenderEx.Attributes Assembly Bannerlord.UIExtenderEx.dll Base class for extensions attributes public abstract class BaseUIExtenderAttribute : Attribute Inheritance object Attribute BaseUIExtenderAttribute Derived PrefabExtensionAttribute ViewModelMixinAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Bannerlord.UIExtenderEx.Attributes.DataSourceMethodAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Attributes.DataSourceMethodAttribute.html",
    "title": "Class DataSourceMethodAttribute | UIExtenderEx Documentation",
    "summary": "Class DataSourceMethodAttribute Namespace Bannerlord.UIExtenderEx.Attributes Assembly Bannerlord.UIExtenderEx.dll Attribute for mixin methods to be added to view models. Only methods specified by this attribute will actually end up in extended view model [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] public sealed class DataSourceMethodAttribute : Attribute Inheritance object Attribute DataSourceMethodAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Bannerlord.UIExtenderEx.Attributes.PrefabExtensionAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Attributes.PrefabExtensionAttribute.html",
    "title": "Class PrefabExtensionAttribute | UIExtenderEx Documentation",
    "summary": "Class PrefabExtensionAttribute Namespace Bannerlord.UIExtenderEx.Attributes Assembly Bannerlord.UIExtenderEx.dll Attribute for prefab XML extensions. Extension classes should inherit from one of the IPrefabPatch base classes and should be marked with this attribute [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public sealed class PrefabExtensionAttribute : BaseUIExtenderAttribute Inheritance object Attribute BaseUIExtenderAttribute PrefabExtensionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PrefabExtensionAttribute(string, string?) Constructor public PrefabExtensionAttribute(string movie, string? xpath = null) Parameters movie string Gauntlet Movie name to extend xpath string XPath of the node to operate against (optional) PrefabExtensionAttribute(string, string?, string?) Constructor [Obsolete(\"AutoGens are globally disabled for now. When the game will be released on Linux/OSX we'll reuse this property again.\")] public PrefabExtensionAttribute(string movie, string? xpath = null, string? autoGenWidgetName = null) Parameters movie string Gauntlet Movie name to extend xpath string XPath of the node to operate against (optional) autoGenWidgetName string Gauntlet Movie name to prevent from loading as an auto-generated Widget (optional) Properties AutoGenWidgetName Gauntlet Movie name to prevent from loading as an auto-generated Widget (optional) [Obsolete(\"AutoGens are globally disabled for now. When the game will be released on Linux/OSX we'll reuse this property again.\")] public string? AutoGenWidgetName { get; } Property Value string Movie Gauntlet Movie name to extend public string Movie { get; } Property Value string XPath XPath of the node to operate against (optional) public string? XPath { get; } Property Value string"
  },
  "api/Bannerlord.UIExtenderEx.Attributes.ViewModelMixinAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Attributes.ViewModelMixinAttribute.html",
    "title": "Class ViewModelMixinAttribute | UIExtenderEx Documentation",
    "summary": "Class ViewModelMixinAttribute Namespace Bannerlord.UIExtenderEx.Attributes Assembly Bannerlord.UIExtenderEx.dll Attribute to mark view model mixins. Mixin classes should extend from BaseViewModelMixin<TViewModel> and should be marked with this attribute [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public sealed class ViewModelMixinAttribute : BaseUIExtenderAttribute Inheritance object Attribute BaseUIExtenderAttribute ViewModelMixinAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ViewModelMixinAttribute() public ViewModelMixinAttribute() ViewModelMixinAttribute(bool) public ViewModelMixinAttribute(bool handleDerived) Parameters handleDerived bool ViewModelMixinAttribute(string) public ViewModelMixinAttribute(string refreshMethodName) Parameters refreshMethodName string ViewModelMixinAttribute(string?, bool) public ViewModelMixinAttribute(string? refreshMethodName = null, bool handleDerived = false) Parameters refreshMethodName string handleDerived bool Properties HandleDerived public bool HandleDerived { get; } Property Value bool RefreshMethodName public string? RefreshMethodName { get; } Property Value string"
  },
  "api/Bannerlord.UIExtenderEx.Attributes.html": {
    "href": "api/Bannerlord.UIExtenderEx.Attributes.html",
    "title": "Namespace Bannerlord.UIExtenderEx.Attributes | UIExtenderEx Documentation",
    "summary": "Namespace Bannerlord.UIExtenderEx.Attributes Classes BaseUIExtenderAttribute Base class for extensions attributes DataSourceMethodAttribute Attribute for mixin methods to be added to view models. Only methods specified by this attribute will actually end up in extended view model PrefabExtensionAttribute Attribute for prefab XML extensions. Extension classes should inherit from one of the IPrefabPatch base classes and should be marked with this attribute ViewModelMixinAttribute Attribute to mark view model mixins. Mixin classes should extend from BaseViewModelMixin<TViewModel> and should be marked with this attribute"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.CustomPatch-1.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.CustomPatch-1.html",
    "title": "Class CustomPatch<T> | UIExtenderEx Documentation",
    "summary": "Class CustomPatch<T> Namespace Bannerlord.UIExtenderEx.Prefabs Assembly Bannerlord.UIExtenderEx.dll Custom patch on either whole XmlDocument (if T is XmlDocument) or Xpath specified node (if XmlNode is the generic argument) public abstract class CustomPatch<T> : IPrefabPatch where T : XmlNode Type Parameters T Inheritance object CustomPatch<T> Implements IPrefabPatch Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id public abstract string Id { get; } Property Value string Methods Apply(T) Apply this patch to obj public abstract void Apply(T obj) Parameters obj T"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.EmbedPrefabExtensionInsertPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.EmbedPrefabExtensionInsertPatch.html",
    "title": "Class EmbedPrefabExtensionInsertPatch | UIExtenderEx Documentation",
    "summary": "Class EmbedPrefabExtensionInsertPatch Namespace Bannerlord.UIExtenderEx.Prefabs Assembly Bannerlord.UIExtenderEx.dll [Obsolete(\"PrefabExtensionInsertPatch is obsolete\")] public abstract class EmbedPrefabExtensionInsertPatch : PrefabExtensionInsertPatch, IPrefabPatch Inheritance object InsertPatch PrefabExtensionInsertPatch EmbedPrefabExtensionInsertPatch Implements IPrefabPatch Inherited Members InsertPatch.PositionFirst InsertPatch.PositionLast InsertPatch.Id InsertPatch.Position object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EmbedPrefabExtensionInsertPatch(Assembly, string) protected EmbedPrefabExtensionInsertPatch(Assembly assembly, string path) Parameters assembly Assembly path string Methods GetPrefabExtension() public override XmlDocument GetPrefabExtension() Returns XmlDocument"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.IPrefabPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.IPrefabPatch.html",
    "title": "Interface IPrefabPatch | UIExtenderEx Documentation",
    "summary": "Interface IPrefabPatch Namespace Bannerlord.UIExtenderEx.Prefabs Assembly Bannerlord.UIExtenderEx.dll General interface for XML prefab patch public interface IPrefabPatch Properties Id string Id { get; } Property Value string"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.InsertPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.InsertPatch.html",
    "title": "Class InsertPatch | UIExtenderEx Documentation",
    "summary": "Class InsertPatch Namespace Bannerlord.UIExtenderEx.Prefabs Assembly Bannerlord.UIExtenderEx.dll Base class for insert patches public abstract class InsertPatch : IPrefabPatch Inheritance object InsertPatch Implements IPrefabPatch Derived PrefabExtensionInsertPatch Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields PositionFirst Constant that will insert snippet at the very beginning public const int PositionFirst = 0 Field Value int PositionLast Constant that will insert snippet at the very end public const int PositionLast = 2147483647 Field Value int Properties Id public abstract string Id { get; } Property Value string Position Position to insert snippet at public abstract int Position { get; } Property Value int Methods GetPrefabExtension() public abstract XmlDocument GetPrefabExtension() Returns XmlDocument"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.ModulePrefabExtensionInsertPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.ModulePrefabExtensionInsertPatch.html",
    "title": "Class ModulePrefabExtensionInsertPatch | UIExtenderEx Documentation",
    "summary": "Class ModulePrefabExtensionInsertPatch Namespace Bannerlord.UIExtenderEx.Prefabs Assembly Bannerlord.UIExtenderEx.dll Patch that inserts prefab extension (specified by Name) as a child in XPath specified node, at specific position (Position property) Extension snippet should be named as {Name}.xml and located at module's GUI/PrefabExtensions folder. [Obsolete(\"Use Prefabs2.PrefabExtensionInsertPatch instead.\")] public abstract class ModulePrefabExtensionInsertPatch : PrefabExtensionInsertPatch, IPrefabPatch Inheritance object InsertPatch PrefabExtensionInsertPatch ModulePrefabExtensionInsertPatch Implements IPrefabPatch Inherited Members InsertPatch.PositionFirst InsertPatch.PositionLast InsertPatch.Id InsertPatch.Position object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ModulePrefabExtensionInsertPatch(string, string) protected ModulePrefabExtensionInsertPatch(string name, string moduleName) Parameters name string moduleName string Methods GetPrefabExtension() public override XmlDocument GetPrefabExtension() Returns XmlDocument"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertAsSiblingPatch.InsertType.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertAsSiblingPatch.InsertType.html",
    "title": "Enum PrefabExtensionInsertAsSiblingPatch.InsertType | UIExtenderEx Documentation",
    "summary": "Enum PrefabExtensionInsertAsSiblingPatch.InsertType Namespace Bannerlord.UIExtenderEx.Prefabs Assembly Bannerlord.UIExtenderEx.dll Insert type enum - Prepend inserts snippet before sibling, Append - after public enum PrefabExtensionInsertAsSiblingPatch.InsertType Fields Append = 1 Prepend = 0"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertAsSiblingPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertAsSiblingPatch.html",
    "title": "Class PrefabExtensionInsertAsSiblingPatch | UIExtenderEx Documentation",
    "summary": "Class PrefabExtensionInsertAsSiblingPatch Namespace Bannerlord.UIExtenderEx.Prefabs Assembly Bannerlord.UIExtenderEx.dll Patch that inserts prefab extension as a sibling to node specified by Xpath. Order is controlled by Type property. public abstract class PrefabExtensionInsertAsSiblingPatch : IPrefabPatch Inheritance object PrefabExtensionInsertAsSiblingPatch Implements IPrefabPatch Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Name of the extension snippet, without .xml public abstract string Id { get; } Property Value string Type Type of the insert public virtual PrefabExtensionInsertAsSiblingPatch.InsertType Type { get; } Property Value PrefabExtensionInsertAsSiblingPatch.InsertType Methods GetPrefabExtension() public abstract XmlDocument GetPrefabExtension() Returns XmlDocument"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionInsertPatch.html",
    "title": "Class PrefabExtensionInsertPatch | UIExtenderEx Documentation",
    "summary": "Class PrefabExtensionInsertPatch Namespace Bannerlord.UIExtenderEx.Prefabs Assembly Bannerlord.UIExtenderEx.dll Patch that inserts prefab extension (specified by Name) as a child in XPath specified node, at specific position (Position property) [Obsolete(\"Use Prefabs2.PrefabExtensionInsertPatch instead.\")] public abstract class PrefabExtensionInsertPatch : InsertPatch, IPrefabPatch Inheritance object InsertPatch PrefabExtensionInsertPatch Implements IPrefabPatch Derived EmbedPrefabExtensionInsertPatch ModulePrefabExtensionInsertPatch Inherited Members InsertPatch.PositionFirst InsertPatch.PositionLast InsertPatch.Id InsertPatch.Position InsertPatch.GetPrefabExtension() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionReplacePatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionReplacePatch.html",
    "title": "Class PrefabExtensionReplacePatch | UIExtenderEx Documentation",
    "summary": "Class PrefabExtensionReplacePatch Namespace Bannerlord.UIExtenderEx.Prefabs Assembly Bannerlord.UIExtenderEx.dll Patch that replaces node specified by XPath with node from prefab extension public abstract class PrefabExtensionReplacePatch : IPrefabPatch Inheritance object PrefabExtensionReplacePatch Implements IPrefabPatch Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Name of the extension snippet, without .xml public abstract string Id { get; } Property Value string Methods GetPrefabExtension() public abstract XmlDocument GetPrefabExtension() Returns XmlDocument"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionSetAttributePatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.PrefabExtensionSetAttributePatch.html",
    "title": "Class PrefabExtensionSetAttributePatch | UIExtenderEx Documentation",
    "summary": "Class PrefabExtensionSetAttributePatch Namespace Bannerlord.UIExtenderEx.Prefabs Assembly Bannerlord.UIExtenderEx.dll Patch that adds or replaces node's attribute specified by XPath with node from prefab extension public abstract class PrefabExtensionSetAttributePatch : IPrefabPatch Inheritance object PrefabExtensionSetAttributePatch Implements IPrefabPatch Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Attribute public abstract string Attribute { get; } Property Value string Id Name of the extension snippet, without .xml public abstract string Id { get; } Property Value string Value public abstract string Value { get; } Property Value string"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs.html",
    "title": "Namespace Bannerlord.UIExtenderEx.Prefabs | UIExtenderEx Documentation",
    "summary": "Namespace Bannerlord.UIExtenderEx.Prefabs Classes CustomPatch<T> Custom patch on either whole XmlDocument (if T is XmlDocument) or Xpath specified node (if XmlNode is the generic argument) EmbedPrefabExtensionInsertPatch InsertPatch Base class for insert patches ModulePrefabExtensionInsertPatch Patch that inserts prefab extension (specified by Name) as a child in XPath specified node, at specific position (Position property) Extension snippet should be named as {Name}.xml and located at module's GUI/PrefabExtensions folder. PrefabExtensionInsertAsSiblingPatch Patch that inserts prefab extension as a sibling to node specified by Xpath. Order is controlled by Type property. PrefabExtensionInsertPatch Patch that inserts prefab extension (specified by Name) as a child in XPath specified node, at specific position (Position property) PrefabExtensionReplacePatch Patch that replaces node specified by XPath with node from prefab extension PrefabExtensionSetAttributePatch Patch that adds or replaces node's attribute specified by XPath with node from prefab extension Interfaces IPrefabPatch General interface for XML prefab patch Enums PrefabExtensionInsertAsSiblingPatch.InsertType Insert type enum - Prepend inserts snippet before sibling, Append - after"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.InsertType.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.InsertType.html",
    "title": "Enum InsertType | UIExtenderEx Documentation",
    "summary": "Enum InsertType Namespace Bannerlord.UIExtenderEx.Prefabs2 Assembly Bannerlord.UIExtenderEx.dll public enum InsertType Fields Append = 4 Child = 3 Prepend = 0 Remove = 5 Replace = 2 ReplaceKeepChildren = 1"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionContentAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionContentAttribute.html",
    "title": "Class PrefabExtensionInsertPatch.PrefabExtensionContentAttribute | UIExtenderEx Documentation",
    "summary": "Class PrefabExtensionInsertPatch.PrefabExtensionContentAttribute Namespace Bannerlord.UIExtenderEx.Prefabs2 Assembly Bannerlord.UIExtenderEx.dll Used on a single Property or Method in PrefabExtensionInsertPatch to flag it as containing the patch information. Supported Types: stringRepresents either the name of a file (use PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute), or xml (use PrefabExtensionInsertPatch.PrefabExtensionTextAttribute). XmlDocumentUse PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute. The root node of the document and all of its children will be inserted at the target location. XmlNodeUse PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute. The node and all of its children will be inserted at the target location. IEnumerable<T> of type XmlNodeUse PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute. Nodes will be inserted in the same order that they appear in this list at the target location. [AttributeUsage(AttributeTargets.Method|AttributeTargets.Property)] protected abstract class PrefabExtensionInsertPatch.PrefabExtensionContentAttribute : Attribute Inheritance object Attribute PrefabExtensionInsertPatch.PrefabExtensionContentAttribute Derived PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute.html",
    "title": "Class PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute | UIExtenderEx Documentation",
    "summary": "Class PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute Namespace Bannerlord.UIExtenderEx.Prefabs2 Assembly Bannerlord.UIExtenderEx.dll Used when Content is of type string and refers to a file name. The file should have an extension of type .xml, and be located inside of the GUI folder of your module. You can include or omit the extension type. I.e. both of the following will work: YourPatchFileName YourPatchFileName.xml See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for info on other attribute types. protected sealed class PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute : PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute Inheritance object Attribute PrefabExtensionInsertPatch.PrefabExtensionContentAttribute PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute Inherited Members PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute.RemoveRootNode Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PrefabExtensionFileNameAttribute(bool) Used when Content is of type string and refers to a file name. The file should have an extension of type .xml, and be located inside of the GUI folder of your module. You can include or omit the extension type. I.e. both of the following will work: YourPatchFileName YourPatchFileName.xml See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for info on other attribute types. public PrefabExtensionFileNameAttribute(bool removeRootNode = false) Parameters removeRootNode bool If set to true, the root node of will be removed. This is useful when you wish to insert multiple nodes at the same level (as siblings) from a single patch."
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute.html",
    "title": "Class PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute | UIExtenderEx Documentation",
    "summary": "Class PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute Namespace Bannerlord.UIExtenderEx.Prefabs2 Assembly Bannerlord.UIExtenderEx.dll protected abstract class PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute : PrefabExtensionInsertPatch.PrefabExtensionContentAttribute Inheritance object Attribute PrefabExtensionInsertPatch.PrefabExtensionContentAttribute PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute Derived PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute PrefabExtensionInsertPatch.PrefabExtensionTextAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PrefabExtensionSingleContentAttribute(bool) Used on a single Property or Method in PrefabExtensionInsertPatch to flag it as containing the patch information. Supported Types: stringRepresents either the name of a file (use PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute), or xml (use PrefabExtensionInsertPatch.PrefabExtensionTextAttribute). XmlDocumentUse PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute. The root node of the document and all of its children will be inserted at the target location. XmlNodeUse PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute. The node and all of its children will be inserted at the target location. IEnumerable<T> of type XmlNodeUse PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute. Nodes will be inserted in the same order that they appear in this list at the target location. protected PrefabExtensionSingleContentAttribute(bool removeRootNode) Parameters removeRootNode bool If set to true, the root node of will be removed. This is useful when you wish to insert multiple nodes at the same level (as siblings) from a single patch. Properties RemoveRootNode If set to true, the root node of Content will be removed. This is useful when you wish to insert multiple nodes at the same level (as siblings) from a single patch. public bool RemoveRootNode { get; } Property Value bool"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionTextAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionTextAttribute.html",
    "title": "Class PrefabExtensionInsertPatch.PrefabExtensionTextAttribute | UIExtenderEx Documentation",
    "summary": "Class PrefabExtensionInsertPatch.PrefabExtensionTextAttribute Namespace Bannerlord.UIExtenderEx.Prefabs2 Assembly Bannerlord.UIExtenderEx.dll Use when the property or return of your method is of type string and is xml. The xml must be properly formatted with a single root node. If RemoveRootNode is set to false, the root node of the document, as well as all of its children, will be inserted at the target location. If RemoveRootNode is set to true, the root node of the document will be ignored, and all of the root node's children will be placed at the target location instead. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. protected sealed class PrefabExtensionInsertPatch.PrefabExtensionTextAttribute : PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute Inheritance object Attribute PrefabExtensionInsertPatch.PrefabExtensionContentAttribute PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute PrefabExtensionInsertPatch.PrefabExtensionTextAttribute Inherited Members PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute.RemoveRootNode Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PrefabExtensionTextAttribute(bool) Use when the property or return of your method is of type string and is xml. The xml must be properly formatted with a single root node. If RemoveRootNode is set to false, the root node of the document, as well as all of its children, will be inserted at the target location. If RemoveRootNode is set to true, the root node of the document will be ignored, and all of the root node's children will be placed at the target location instead. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. public PrefabExtensionTextAttribute(bool removeRootNode = false) Parameters removeRootNode bool If set to true, the root node of will be removed. This is useful when you wish to insert multiple nodes at the same level (as siblings) from a single patch."
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute.html",
    "title": "Class PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute | UIExtenderEx Documentation",
    "summary": "Class PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute Namespace Bannerlord.UIExtenderEx.Prefabs2 Assembly Bannerlord.UIExtenderEx.dll Use when the property or return of your method is of type XmlDocument. If RemoveRootNode is set to false, the root node of the document, as well as all of its children, will be inserted at the target location. If RemoveRootNode is set to true, the root node of the document will be ignored, and all of the root node's children will be placed at the target location instead. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. protected sealed class PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute : PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute Inheritance object Attribute PrefabExtensionInsertPatch.PrefabExtensionContentAttribute PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute Inherited Members PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute.RemoveRootNode Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PrefabExtensionXmlDocumentAttribute(bool) Use when the property or return of your method is of type XmlDocument. If RemoveRootNode is set to false, the root node of the document, as well as all of its children, will be inserted at the target location. If RemoveRootNode is set to true, the root node of the document will be ignored, and all of the root node's children will be placed at the target location instead. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. public PrefabExtensionXmlDocumentAttribute(bool removeRootNode = false) Parameters removeRootNode bool If set to true, the root node of will be removed. This is useful when you wish to insert multiple nodes at the same level (as siblings) from a single patch."
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute.html",
    "title": "Class PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute | UIExtenderEx Documentation",
    "summary": "Class PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute Namespace Bannerlord.UIExtenderEx.Prefabs2 Assembly Bannerlord.UIExtenderEx.dll Use when the property or return of your method is of type XmlNode. The node and all of its children will be inserted at the target location. If RemoveRootNode is set to false, the root node of the document, as well as all of its children, will be inserted at the target location. If RemoveRootNode is set to true, the root node of the document will be ignored, and all of the root node's children will be placed at the target location instead. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. protected sealed class PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute : PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute Inheritance object Attribute PrefabExtensionInsertPatch.PrefabExtensionContentAttribute PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute Inherited Members PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute.RemoveRootNode Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PrefabExtensionXmlNodeAttribute(bool) Use when the property or return of your method is of type XmlNode. The node and all of its children will be inserted at the target location. If RemoveRootNode is set to false, the root node of the document, as well as all of its children, will be inserted at the target location. If RemoveRootNode is set to true, the root node of the document will be ignored, and all of the root node's children will be placed at the target location instead. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. public PrefabExtensionXmlNodeAttribute(bool removeRootNode = false) Parameters removeRootNode bool If set to true, the root node of will be removed. This is useful when you wish to insert multiple nodes at the same level (as siblings) from a single patch."
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute.html",
    "title": "Class PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute | UIExtenderEx Documentation",
    "summary": "Class PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute Namespace Bannerlord.UIExtenderEx.Prefabs2 Assembly Bannerlord.UIExtenderEx.dll Use when the property or return of your method is of type IEnumerable{XmlNode}. Nodes will be inserted in the same order that they appear in this list at the target location. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. protected sealed class PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute : PrefabExtensionInsertPatch.PrefabExtensionContentAttribute Inheritance object Attribute PrefabExtensionInsertPatch.PrefabExtensionContentAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionInsertPatch.html",
    "title": "Class PrefabExtensionInsertPatch | UIExtenderEx Documentation",
    "summary": "Class PrefabExtensionInsertPatch Namespace Bannerlord.UIExtenderEx.Prefabs2 Assembly Bannerlord.UIExtenderEx.dll Patch that inserts Content relative to the target node specified in the XPath property. A single Method or Property should be flagged with the PrefabExtensionInsertPatch.PrefabExtensionContentAttribute. Content Attribute Types: PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute PrefabExtensionInsertPatch.PrefabExtensionTextAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute public abstract class PrefabExtensionInsertPatch Inheritance object PrefabExtensionInsertPatch Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Index Only used when Type is set to Child or ReplaceKeepChildren. See Type for more details. public virtual int Index { get; } Property Value int Type InsertType specifies the placement of the content flagged by your PrefabExtensionInsertPatch.PrefabExtensionContentAttribute relative to the target node specified in the XPath property. Insertion Methods PrependContent is placed before the target node at the same height (siblings). ReplaceKeepChildrenTarget node is replaced with the new Content. The children of the original node are added as children to the newly inserted Content. If Content represents more than one root node, Index will be used to specify which new node should inherit the children. ReplaceTarget node and all of its children are replaced with the new Content. ChildContent is inserted as a child (children) of the target node. If the target node has children, Index will be used to place the new nodes relative to the pre-existing children. AppendContent is placed after the target node at the same height (siblings). RemoveRemoves the node. public abstract InsertType Type { get; } Property Value InsertType"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionSetAttributePatch.Attribute.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionSetAttributePatch.Attribute.html",
    "title": "Struct PrefabExtensionSetAttributePatch.Attribute | UIExtenderEx Documentation",
    "summary": "Struct PrefabExtensionSetAttributePatch.Attribute Namespace Bannerlord.UIExtenderEx.Prefabs2 Assembly Bannerlord.UIExtenderEx.dll public readonly struct PrefabExtensionSetAttributePatch.Attribute Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Attribute(string, string) public Attribute(string name, string value) Parameters name string value string Properties Name public string Name { get; } Property Value string Value public string Value { get; } Property Value string"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionSetAttributePatch.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.PrefabExtensionSetAttributePatch.html",
    "title": "Class PrefabExtensionSetAttributePatch | UIExtenderEx Documentation",
    "summary": "Class PrefabExtensionSetAttributePatch Namespace Bannerlord.UIExtenderEx.Prefabs2 Assembly Bannerlord.UIExtenderEx.dll Patch that adds or replaces node's attributes specified by XPath with node from prefab extension public abstract class PrefabExtensionSetAttributePatch Inheritance object PrefabExtensionSetAttributePatch Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Attributes public abstract List<PrefabExtensionSetAttributePatch.Attribute> Attributes { get; } Property Value List<PrefabExtensionSetAttributePatch.Attribute>"
  },
  "api/Bannerlord.UIExtenderEx.Prefabs2.html": {
    "href": "api/Bannerlord.UIExtenderEx.Prefabs2.html",
    "title": "Namespace Bannerlord.UIExtenderEx.Prefabs2 | UIExtenderEx Documentation",
    "summary": "Namespace Bannerlord.UIExtenderEx.Prefabs2 Classes PrefabExtensionInsertPatch Patch that inserts Content relative to the target node specified in the XPath property. A single Method or Property should be flagged with the PrefabExtensionInsertPatch.PrefabExtensionContentAttribute. Content Attribute Types: PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute PrefabExtensionInsertPatch.PrefabExtensionTextAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute PrefabExtensionInsertPatch.PrefabExtensionContentAttribute Used on a single Property or Method in PrefabExtensionInsertPatch to flag it as containing the patch information. Supported Types: stringRepresents either the name of a file (use PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute), or xml (use PrefabExtensionInsertPatch.PrefabExtensionTextAttribute). XmlDocumentUse PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute. The root node of the document and all of its children will be inserted at the target location. XmlNodeUse PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute. The node and all of its children will be inserted at the target location. IEnumerable<T> of type XmlNodeUse PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute. Nodes will be inserted in the same order that they appear in this list at the target location. PrefabExtensionInsertPatch.PrefabExtensionFileNameAttribute Used when Content is of type string and refers to a file name. The file should have an extension of type .xml, and be located inside of the GUI folder of your module. You can include or omit the extension type. I.e. both of the following will work: YourPatchFileName YourPatchFileName.xml See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for info on other attribute types. PrefabExtensionInsertPatch.PrefabExtensionSingleContentAttribute PrefabExtensionInsertPatch.PrefabExtensionTextAttribute Use when the property or return of your method is of type string and is xml. The xml must be properly formatted with a single root node. If RemoveRootNode is set to false, the root node of the document, as well as all of its children, will be inserted at the target location. If RemoveRootNode is set to true, the root node of the document will be ignored, and all of the root node's children will be placed at the target location instead. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. PrefabExtensionInsertPatch.PrefabExtensionXmlDocumentAttribute Use when the property or return of your method is of type XmlDocument. If RemoveRootNode is set to false, the root node of the document, as well as all of its children, will be inserted at the target location. If RemoveRootNode is set to true, the root node of the document will be ignored, and all of the root node's children will be placed at the target location instead. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. PrefabExtensionInsertPatch.PrefabExtensionXmlNodeAttribute Use when the property or return of your method is of type XmlNode. The node and all of its children will be inserted at the target location. If RemoveRootNode is set to false, the root node of the document, as well as all of its children, will be inserted at the target location. If RemoveRootNode is set to true, the root node of the document will be ignored, and all of the root node's children will be placed at the target location instead. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. PrefabExtensionInsertPatch.PrefabExtensionXmlNodesAttribute Use when the property or return of your method is of type IEnumerable{XmlNode}. Nodes will be inserted in the same order that they appear in this list at the target location. See PrefabExtensionInsertPatch.PrefabExtensionContentAttribute for more info. PrefabExtensionSetAttributePatch Patch that adds or replaces node's attributes specified by XPath with node from prefab extension Structs PrefabExtensionSetAttributePatch.Attribute Enums InsertType"
  },
  "api/Bannerlord.UIExtenderEx.ResourceManager.BrushFactoryManager.html": {
    "href": "api/Bannerlord.UIExtenderEx.ResourceManager.BrushFactoryManager.html",
    "title": "Class BrushFactoryManager | UIExtenderEx Documentation",
    "summary": "Class BrushFactoryManager Namespace Bannerlord.UIExtenderEx.ResourceManager Assembly Bannerlord.UIExtenderEx.dll public static class BrushFactoryManager Inheritance object BrushFactoryManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(XmlDocument) public static IEnumerable<Brush> Create(XmlDocument xmlDocument) Parameters xmlDocument XmlDocument Returns IEnumerable<Brush> CreateAndRegister(XmlDocument) public static void CreateAndRegister(XmlDocument xmlDocument) Parameters xmlDocument XmlDocument Register(IEnumerable<Brush>) public static void Register(IEnumerable<Brush> brushes) Parameters brushes IEnumerable<Brush>"
  },
  "api/Bannerlord.UIExtenderEx.ResourceManager.WidgetFactoryManager.html": {
    "href": "api/Bannerlord.UIExtenderEx.ResourceManager.WidgetFactoryManager.html",
    "title": "Class WidgetFactoryManager | UIExtenderEx Documentation",
    "summary": "Class WidgetFactoryManager Namespace Bannerlord.UIExtenderEx.ResourceManager Assembly Bannerlord.UIExtenderEx.dll public static class WidgetFactoryManager Inheritance object WidgetFactoryManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(string, XmlDocument) public static WidgetPrefab? Create(string name, XmlDocument doc) Parameters name string doc XmlDocument Returns WidgetPrefab Create(XmlDocument) public static WidgetPrefab? Create(XmlDocument doc) Parameters doc XmlDocument Returns WidgetPrefab CreateAndRegister(string, XmlDocument) public static void CreateAndRegister(string name, XmlDocument xmlDocument) Parameters name string xmlDocument XmlDocument Patch(Harmony) public static void Patch(Harmony harmony) Parameters harmony Harmony Register(string, Func<WidgetPrefab?>) public static void Register(string name, Func<WidgetPrefab?> create) Parameters name string create Func<WidgetPrefab> Register(Type) public static void Register(Type widgetType) Parameters widgetType Type"
  },
  "api/Bannerlord.UIExtenderEx.ResourceManager.html": {
    "href": "api/Bannerlord.UIExtenderEx.ResourceManager.html",
    "title": "Namespace Bannerlord.UIExtenderEx.ResourceManager | UIExtenderEx Documentation",
    "summary": "Namespace Bannerlord.UIExtenderEx.ResourceManager Classes BrushFactoryManager WidgetFactoryManager"
  },
  "api/Bannerlord.UIExtenderEx.Settings.ISettingsProvider.html": {
    "href": "api/Bannerlord.UIExtenderEx.Settings.ISettingsProvider.html",
    "title": "Interface ISettingsProvider | UIExtenderEx Documentation",
    "summary": "Interface ISettingsProvider Namespace Bannerlord.UIExtenderEx.Settings Assembly Bannerlord.UIExtenderEx.dll public interface ISettingsProvider Properties DumpXML bool DumpXML { get; set; } Property Value bool"
  },
  "api/Bannerlord.UIExtenderEx.Settings.SettingsSubModuleTags.html": {
    "href": "api/Bannerlord.UIExtenderEx.Settings.SettingsSubModuleTags.html",
    "title": "Class SettingsSubModuleTags | UIExtenderEx Documentation",
    "summary": "Class SettingsSubModuleTags Namespace Bannerlord.UIExtenderEx.Settings Assembly Bannerlord.UIExtenderEx.dll public class SettingsSubModuleTags : ISettingsProvider Inheritance object SettingsSubModuleTags Implements ISettingsProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SettingsSubModuleTags() public SettingsSubModuleTags() Properties DumpXML public bool DumpXML { get; set; } Property Value bool"
  },
  "api/Bannerlord.UIExtenderEx.Settings.html": {
    "href": "api/Bannerlord.UIExtenderEx.Settings.html",
    "title": "Namespace Bannerlord.UIExtenderEx.Settings | UIExtenderEx Documentation",
    "summary": "Namespace Bannerlord.UIExtenderEx.Settings Classes SettingsSubModuleTags Interfaces ISettingsProvider"
  },
  "api/Bannerlord.UIExtenderEx.SubModule.html": {
    "href": "api/Bannerlord.UIExtenderEx.SubModule.html",
    "title": "Class SubModule | UIExtenderEx Documentation",
    "summary": "Class SubModule Namespace Bannerlord.UIExtenderEx Assembly Bannerlord.UIExtenderEx.dll public class SubModule : MBSubModuleBase Inheritance object MBSubModuleBase SubModule Inherited Members MBSubModuleBase.OnSubModuleLoad() MBSubModuleBase.OnSubModuleUnloaded() MBSubModuleBase.OnBeforeInitialModuleScreenSetAsRoot() MBSubModuleBase.OnConfigChanged() MBSubModuleBase.OnGameStart(Game, IGameStarter) MBSubModuleBase.OnApplicationTick(float) MBSubModuleBase.AfterAsyncTickTick(float) MBSubModuleBase.InitializeGameStarter(Game, IGameStarter) MBSubModuleBase.OnGameLoaded(Game, object) MBSubModuleBase.OnNewGameCreated(Game, object) MBSubModuleBase.BeginGameStart(Game) MBSubModuleBase.OnCampaignStart(Game, object) MBSubModuleBase.RegisterSubModuleObjects(bool) MBSubModuleBase.AfterRegisterSubModuleObjects(bool) MBSubModuleBase.OnMultiplayerGameStart(Game, object) MBSubModuleBase.OnGameInitializationFinished(Game) MBSubModuleBase.OnAfterGameInitializationFinished(Game, object) MBSubModuleBase.DoLoading(Game) MBSubModuleBase.OnGameEnd(Game) MBSubModuleBase.OnMissionBehaviorInitialize(Mission) MBSubModuleBase.OnBeforeMissionBehaviorInitialize(Mission) MBSubModuleBase.OnInitialState() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SubModule() public SubModule()"
  },
  "api/Bannerlord.UIExtenderEx.UIExtender.html": {
    "href": "api/Bannerlord.UIExtenderEx.UIExtender.html",
    "title": "Class UIExtender | UIExtenderEx Documentation",
    "summary": "Class UIExtender Namespace Bannerlord.UIExtenderEx Assembly Bannerlord.UIExtenderEx.dll Client class instance of which should be created for each module using this library public class UIExtender Inheritance object UIExtender Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UIExtender(string) Default constructor. moduleName should match module folder because it will be used to look-up resources [Obsolete(\"Use UIExtender.Create(moduleName) if backwards compatibility is not a concern.\", false)] public UIExtender(string moduleName) Parameters moduleName string Module name, should match module folder Methods Create(string) public static UIExtender Create(string moduleName) Parameters moduleName string Returns UIExtender Deregister() public void Deregister() Disable() public void Disable() Disable(Type) public void Disable(Type type) Parameters type Type Enable() public void Enable() Enable(Type) public void Enable(Type type) Parameters type Type GetUIExtenderFor(string) public static UIExtender? GetUIExtenderFor(string moduleName) Parameters moduleName string Returns UIExtender Register() Obsolete. Use Register(Assembly). [Obsolete(\"Use explicit call Register(Assembly)\", true)] public void Register() Register(IEnumerable<Type>) Register extension types Should be called during OnSubModuleLoad public void Register(IEnumerable<Type> types) Parameters types IEnumerable<Type> Register(Assembly) Register extension types from specified assembly Should be called during OnSubModuleLoad public void Register(Assembly assembly) Parameters assembly Assembly"
  },
  "api/Bannerlord.UIExtenderEx.UIExtenderExSettings.html": {
    "href": "api/Bannerlord.UIExtenderEx.UIExtenderExSettings.html",
    "title": "Class UIExtenderExSettings | UIExtenderEx Documentation",
    "summary": "Class UIExtenderExSettings Namespace Bannerlord.UIExtenderEx Assembly Bannerlord.UIExtenderEx.dll public class UIExtenderExSettings Inheritance object UIExtenderExSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DumpXML public bool DumpXML { get; set; } Property Value bool Instance public static UIExtenderExSettings Instance { get; } Property Value UIExtenderExSettings"
  },
  "api/Bannerlord.UIExtenderEx.ViewModels.BaseViewModelMixin-1.html": {
    "href": "api/Bannerlord.UIExtenderEx.ViewModels.BaseViewModelMixin-1.html",
    "title": "Class BaseViewModelMixin<TViewModel> | UIExtenderEx Documentation",
    "summary": "Class BaseViewModelMixin<TViewModel> Namespace Bannerlord.UIExtenderEx.ViewModels Assembly Bannerlord.UIExtenderEx.dll Basic implementation for IViewModelMixin. Generic parameter TViewModel will be used to determine which ViewModel to extend. You can use the field ViewModel to access the original ViewModel. Be aware that it might be null if GC has disposed the original ViewModel. The mixin holds a weak reference to it. public abstract class BaseViewModelMixin<TViewModel> : IViewModelMixin where TViewModel : ViewModel Type Parameters TViewModel ViewModel this mixin is extending. Inheritance object BaseViewModelMixin<TViewModel> Implements IViewModelMixin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseViewModelMixin(TViewModel) protected BaseViewModelMixin(TViewModel vm) Parameters vm TViewModel Properties ViewModel The original ViewModel. Be aware that it might be null if GC has disposed the original ViewModel. The mixin holds a weak reference to it. protected TViewModel? ViewModel { get; } Property Value TViewModel Methods GetPrivate<TValue>(string) Helper method to get non public value from attached view model instance. protected TValue? GetPrivate<TValue>(string name) Parameters name string name of the field Returns TValue Type Parameters TValue type OnFinalize() Called when the original's OnFinalize() is called. Defaults to an empty method. public virtual void OnFinalize() OnPropertyChanged(string?) protected void OnPropertyChanged(string? propertyName = null) Parameters propertyName string OnPropertyChangedWithValue(object, string?) protected void OnPropertyChangedWithValue(object value, string? propertyName = null) Parameters value object propertyName string OnRefresh() Called when the original ViewModel is refreshed. The method name is dynamic, you need to set RefreshMethodName for the method to be called. Defaults to an empty method. public virtual void OnRefresh() SetField<T>(ref T, T, string) protected bool SetField<T>(ref T field, T value, string propertyName) Parameters field T value T propertyName string Returns bool Type Parameters T SetPrivate<TValue>(string, TValue?) Helper method to set non public value of attached view model instance. protected void SetPrivate<TValue>(string name, TValue? value) Parameters name string name of the member to set value TValue new value Type Parameters TValue member type"
  },
  "api/Bannerlord.UIExtenderEx.ViewModels.IViewModelMixin.html": {
    "href": "api/Bannerlord.UIExtenderEx.ViewModels.IViewModelMixin.html",
    "title": "Interface IViewModelMixin | UIExtenderEx Documentation",
    "summary": "Interface IViewModelMixin Namespace Bannerlord.UIExtenderEx.ViewModels Assembly Bannerlord.UIExtenderEx.dll Interface for ViewModel mixins. Should not be used directly, BaseViewModelMixin<TViewModel> should be used as base class. public interface IViewModelMixin Methods OnFinalize() Called when the original's OnFinalize() is called. Defaults to an empty method. void OnFinalize() OnRefresh() Called when the original ViewModel is refreshed. The method name is dynamic, you need to set RefreshMethodName for the method to be called. Defaults to an empty method. void OnRefresh()"
  },
  "api/Bannerlord.UIExtenderEx.ViewModels.html": {
    "href": "api/Bannerlord.UIExtenderEx.ViewModels.html",
    "title": "Namespace Bannerlord.UIExtenderEx.ViewModels | UIExtenderEx Documentation",
    "summary": "Namespace Bannerlord.UIExtenderEx.ViewModels Classes BaseViewModelMixin<TViewModel> Basic implementation for IViewModelMixin. Generic parameter TViewModel will be used to determine which ViewModel to extend. You can use the field ViewModel to access the original ViewModel. Be aware that it might be null if GC has disposed the original ViewModel. The mixin holds a weak reference to it. Interfaces IViewModelMixin Interface for ViewModel mixins. Should not be used directly, BaseViewModelMixin<TViewModel> should be used as base class."
  },
  "api/Bannerlord.UIExtenderEx.html": {
    "href": "api/Bannerlord.UIExtenderEx.html",
    "title": "Namespace Bannerlord.UIExtenderEx | UIExtenderEx Documentation",
    "summary": "Namespace Bannerlord.UIExtenderEx Classes SubModule UIExtender Client class instance of which should be created for each module using this library UIExtenderExSettings"
  },
  "articles/general/InteractingWithOtherMods.html": {
    "href": "articles/general/InteractingWithOtherMods.html",
    "title": "Interacting with Other Mods | UIExtenderEx Documentation",
    "summary": "Interacting with Other Mods You can access another mod's UIExtender and modify it to your liking. At the moment you are able to disable the UIExtender, deregister it (meaning fully disabling it without the ability to enable it back) and enable. You are able to disable a specific Prefab or Mixin. // Get Mod Configuration Menu's UIExtender var mcm = UIExtender.GetUIExtenderFor(\"MCM.UI\"); // Disable a prefab var mcmPrefab = AccessTools.TypeByName(\"MCM.UI.UIExtenderEx.OptionsPrefabExtension1\"); mcm.Disable(mcmPrefab); // Disable a Mixin var mcmMixin = AccessTools.TypeByName(\"MCM.UI.UIExtenderEx.OptionsVMMixin\"); mcm.Disable(mcmMixin);"
  },
  "articles/general/Overview.html": {
    "href": "articles/general/Overview.html",
    "title": "Overview | UIExtenderEx Documentation",
    "summary": "Overview Check the specific articles."
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "| UIExtenderEx Documentation",
    "summary": ""
  },
  "articles/interface/Overview.html": {
    "href": "articles/interface/Overview.html",
    "title": "Overview | UIExtenderEx Documentation",
    "summary": "Overview"
  },
  "articles/interface/Prefab.html": {
    "href": "articles/interface/Prefab.html",
    "title": "Overview | UIExtenderEx Documentation",
    "summary": "Overview"
  },
  "articles/interface/ViewModelMixin.html": {
    "href": "articles/interface/ViewModelMixin.html",
    "title": "ViewModelMixin | UIExtenderEx Documentation",
    "summary": "ViewModelMixin"
  },
  "articles/runtime/Overview.html": {
    "href": "articles/runtime/Overview.html",
    "title": "Overview | UIExtenderEx Documentation",
    "summary": "Overview"
  },
  "articles/runtime/PrefabPatching.html": {
    "href": "articles/runtime/PrefabPatching.html",
    "title": "Prefab Patching | UIExtenderEx Documentation",
    "summary": "Prefab Patching"
  },
  "articles/runtime/Registration.html": {
    "href": "articles/runtime/Registration.html",
    "title": "Registration | UIExtenderEx Documentation",
    "summary": "Registration"
  },
  "articles/runtime/ViewModelPatching.html": {
    "href": "articles/runtime/ViewModelPatching.html",
    "title": "ViewModel Patching | UIExtenderEx Documentation",
    "summary": "ViewModel Patching"
  },
  "articles/v1/Overview.html": {
    "href": "articles/v1/Overview.html",
    "title": "v1 Documentation | UIExtenderEx Documentation",
    "summary": "v1 Documentation If possible, it is recommended to now use the PrefabsV2 API. Quickstart You mark your prefab extensions based on one of the IPrefabPatch descendants and marking it with PrefabExtension attribute, therefore enabling you to make additions to the specified Movie's XML data. Example of inserting XML at a specific position: [PrefabExtension(\"Insert\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/Standard.TopPanel/Children/ListPanel/Children\")] internal class TestPrefabExtensionInsertPatch : PrefabExtensionInsertPatch { public override string Id => \"Insert\"; public override int Position => 3; private XmlDocument XmlDocument { get; } = new XmlDocument(); public TestPrefabExtensionInsertPatch() { XmlDocument.LoadXml(\"<OptionsTabToggle Id=\\\"Insert\\\" />\"); } public override XmlDocument GetPrefabExtension() => XmlDocument; } Example of replacing XML: [PrefabExtension(\"Replace\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/Standard.TopPanel/Children/ListPanel/Children/OptionsTabToggle[@Id='Replace']\")] internal class TestPrefabExtensionReplacePatch : PrefabExtensionReplacePatch { public override string Id => \"Replace\"; private XmlDocument XmlDocument { get; } = new XmlDocument(); public TestPrefabExtensionReplacePatch() { XmlDocument.LoadXml(\"<OptionsTabToggle Id=\\\"Replaced\\\" />\"); } public override XmlDocument GetPrefabExtension() => XmlDocument; } Example of inserting XML after a specific element: [PrefabExtension(\"InsertAsSiblingAppend\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/Standard.TopPanel/Children/ListPanel/Children/OptionsTabToggle[@Id='InsertAsSibling']\")] internal class TestPrefabExtensionInsertAsSiblingAppendPatch : PrefabExtensionInsertAsSiblingPatch { public override string Id => \"InsertAsSiblingAppend\"; public override InsertType Type => InsertType.Append; private XmlDocument XmlDocument { get; } = new XmlDocument(); public TestPrefabExtensionInsertAsSiblingAppendPatch() { XmlDocument.LoadXml(\"<OptionsTabToggle Id=\\\"InsertAsSiblingAppend\\\" />\"); } public override XmlDocument GetPrefabExtension() => XmlDocument; } Example of adding or replacing XML attribute: [PrefabExtension(\"SetAttribute\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/Standard.TopPanel/Children/ListPanel/Children/OptionsTabToggle[@Id='SetAttribute']\")] internal class TestPrefabExtensionSetAttributePatch : PrefabExtensionSetAttributePatch { public override string Id => \"SetAttribute\"; public override string Attribute => \"CustomAttribute\"; public override string Value => \"Value\"; } Example of inserting XML before a specific element: [PrefabExtension(\"InsertAsSiblingPrepend\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/Standard.TopPanel/Children/ListPanel/Children/OptionsTabToggle[@Id='InsertAsSibling']\")] internal class TestPrefabExtensionInsertAsSiblingPrependPatch : PrefabExtensionInsertAsSiblingPatch { public override string Id => \"InsertAsSiblingPrepend\"; public override InsertType Type => InsertType.Prepend; private XmlDocument XmlDocument { get; } = new XmlDocument(); public TestPrefabExtensionInsertAsSiblingPrependPatch() { XmlDocument.LoadXml(\"<OptionsTabToggle Id=\\\"InsertAsSiblingPrepend\\\" />\"); } public override XmlDocument GetPrefabExtension() => XmlDocument; } In order to add data to the prefab, you need to add properties to the target datasource class, this is done by making a mixin class, inheriting from BaseViewModelMixin<T> and marking it with ViewModelMixin attribute. This class will be mixed in to the target view model T, making fields and methods accessible in the prefab: [ViewModelMixin] public class OptionsVMMixin : BaseViewModelMixin<OptionsVM> { private readonly ModOptionsVM _modOptions; [DataSourceProperty] public ModOptionsVM ModOptions { get { return _modOptions; } } public OptionsVMMixin(OptionsVM vm) : base(vm) { _modOptions = new ModOptionsVM(); } [DataSourceMethod] public void ExecuteCloseOptions() { ModOptions.ExecuteCancelInternal(false); ViewModel?.ExecuteCloseOptions(); } } The last thing is to call UIExtender.Register and UIExtender.Enable to apply your extensions: public class CustomSubModule : MBSubModuleBase { protected override void OnSubModuleLoad() { base.OnSubModuleLoad(); _extender = new UIExtender(\"ModuleName\"); _extender.Register(typeof(CustomSubModule).Assembly); _extender.Enable(); } } To use the OnRefresh overload you will need to specify for UIExtenderEx the underlying method that acts as the conceptual 'Refresh' method in the ViewModel. For example, MapInfoVM has a method Refresh. If such method exists, specify it in the ViewModelMixin like this: [ViewModelMixin(\"Refresh\")] // or [ViewModelMixin(nameof(MapInfoVM.Refresh))] // if the method is public public class MapInfoMixin : BaseViewModelMixin<MapInfoVM> Examples Bannerlord.MBOptionScreen Yet Another Party Organiser"
  },
  "articles/v2/Examples.html": {
    "href": "articles/v2/Examples.html",
    "title": "| UIExtenderEx Documentation",
    "summary": "Examples Mod Configuration Menu Settlement Icons Yet Another Party Organiser"
  },
  "articles/v2/Overview.html": {
    "href": "articles/v2/Overview.html",
    "title": "| UIExtenderEx Documentation",
    "summary": "Quickstart See here for the PrefabsV1 API documentation. It contains both the v1 API usage and how to generally register UIExtenderEx to make it work! Version 2 of the API builds off of the the concepts of the original API, but offers a bit more versatility, and aggregates some of the original prefab types to offer a (hopefully) simpler API. All UIExtenderEx patch classes must be flagged with a PrefabExtensionAttribute. The first parameter is the name of the Movie (the name of the xml file) that your patch targets. The second parameter is an XPath used to specify the node you wish to target inside of the targetted Movie. For those of you who are unfamiliar with XPath: Tutorial Cheatsheet"
  },
  "articles/v2/PrefabExtensionInsertPatch.html": {
    "href": "articles/v2/PrefabExtensionInsertPatch.html",
    "title": "| UIExtenderEx Documentation",
    "summary": "PrefabExtensionInsertPatch Versatile patch that can be used to Prepend, Append, Replace (entirely, or while keeping children) or AddAsChild. Insertion type is determined by the Type Property. Your class insertion patch class should contain a single Property or Method flagged with one of the attributes inheriting from PrefabExtensionContent. Supported types are the following: XmlDocument XmlNode IEnumerable<XmlNode> string (can represent either a file name (PrefabExtensionFileName), or Xml (PrefabExtensionText)) The Attribute you use will depend on the return type of the method, or the type of the property that it is associated with. See PrefabExtensionInsertPatch.cs for the full documentation. Example of prepending the content of an XmlDocument: [PrefabExtension(\"ExampleFile\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/OptionsTabToggle\")] internal class PrependExamplePatch : PrefabExtensionInsertPatch { public override InsertType Type => InsertType.Prepend; private XmlDocument document; public PrependExamplePatch() { document = new XmlDocument(); document.LoadXml(\"<OptionsTabToggle Id=\\\"PrependedTabToggle\\\"><SomeChild/></OptionsTabToggle>\"); } [PrefabExtensionXmlDocument] public XmlDocument GetPrefabExtension() => document; } <!-- ExampleFile.xml --> <!-- Before Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle/> </Children> </OptionsScreenWidget> </Window> </Prefab> <!-- After Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle Id=\"PrependedTabToggle\"> <SomeChild/> </OptionsTabToggle> <OptionsTabToggle/> </Children> </OptionsScreenWidget> </Window> </Prefab> Example of appending an XmlNode: [PrefabExtension(\"ExampleFile\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/OptionsTabToggle\")] internal class AppendExamplePatch : PrefabExtensionInsertPatch { public override InsertType Type => InsertType.Append; private XmlDocument document; public AppendExamplePatch() { document = new XmlDocument(); document.LoadXml(\"<OptionsTabToggle Id=\\\"AppendedTabToggle\\\"/>\"); } [PrefabExtensionXmlNode] public XmlNode GetPatchContent() => document.DocumentElement; } <!-- ExampleFile.xml --> <!-- Before Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle/> </Children> </OptionsScreenWidget> </Window> </Prefab> <!-- After Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle/> <OptionsTabToggle Id=\"AppendedTabToggle\"/> </Children> </OptionsScreenWidget> </Window> </Prefab> Example of adding multiple XmlNodes as children: [PrefabExtension(\"ExampleFile\", \"descendant::OptionsScreenWidget[@Id='Options']/Children\")] internal class AddAsChildrenExamplePatch : PrefabExtensionInsertPatch { public override InsertType Type => InsertType.Child; // When the InsertType is set to InsertType.Child, determines the index the patch should occupy in the target node's child list. // Default is 0 (patch would be the first child). public override int Index => 1; private List<XmlNode> nodes; public AddAsChildrenExamplePatch() { XmlDocument firstChild = new XmlDocument(); firstChild.LoadXml(\"<OptionsTabToggle Id=\\\"InsertedFirstChild\\\"><Children><InnerChild/></Children></OptionsTabToggle>\"); XmlDocument secondChild = new XmlDocument(); secondChild.LoadXml(\"<OptionsTabToggle Id=\\\"InsertedSecondChild\\\"/>\"); nodes = new List<XmlNode> {firstChild, secondChild}; } // Just to demonstrate that both Properties and Methods are supported. [PrefabExtensionXmlNodes] public IEnumerable<XmlNode> Nodes => nodes; } <!-- ExampleFile.xml --> <!-- Before Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle Id=\"ExistingFirstChild\"/> <OptionsTabToggle Id=\"ExistingSecondChild\"/> </Children> </OptionsScreenWidget> </Window> </Prefab> <!-- After Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle Id=\"ExistingFirstChild\"> <OptionsTabToggle Id=\"InsertedFirstChild\"> <Children> <InnerChild/> </Children> </OptionsTabToggle> <OptionsTabToggle Id=\"InsertedSecondChild\"/> <OptionsTabToggle Id=\"ExistingSecondChild\"> </Children> </OptionsScreenWidget> </Window> </Prefab> Example of replacing a node: [PrefabExtension(\"ExampleFile\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/OptionsTabToggle\")] internal class ReplaceNodeExamplePatch : PrefabExtensionInsertPatch { public override InsertType Type => InsertType.Replace; [PrefabExtensionText] public string GetReplacementPatch => \"<Widget Id=\\\"ReplacementNode\\\"/>\"; } <!-- ExampleFile.xml --> <!-- Before Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle> <Children> <SomeChild/> </Children> </OptionsTabToggle> </Children> </OptionsScreenWidget> </Window> </Prefab> <!-- After Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <Widget Id=\"ReplacementNode\"/> </Children> </OptionsScreenWidget> </Window> </Prefab> Example of replacing a node while keeping its children: [PrefabExtension(\"ExampleFile\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/OptionsTabToggle\")] internal class ReplaceNodeExamplePatch : PrefabExtensionInsertPatch { public override InsertType Type => InsertType.ReplaceKeepChildren; // When the InsertType is set to InsertType.ReplaceKeepChildren, determines which new node should inherit the target node's children. // Only applicable when multiple nodes are inserted. public override int Index => 1; private IEnumerable<XmlNode> nodes; [PrefabExtensionXmlNodes] public IEnumerable<XmlNode> GetNodes() { if(nodes is null) { XmlDocument document = new XmlDocument(); document.LoadXml(\"<DiscardedRoot><Widget Id=\\\"FirstChild\\\"/><Widget Id=\\\"SecondChild\\\"/><Widget Id=\\\"ThirdChild\\\"/></DiscardedRoot>\") // We discard the \"DiscardedRoot\" node by only fetching its children. nodes = document.DocumentElement.ChildNodes.Cast<XmlNode>(); } return nodes; } } <!-- ExampleFile.xml --> <!-- Before Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle> <Children> <SomeChild/> </Children> </OptionsTabToggle> </Children> </OptionsScreenWidget> </Window> </Prefab> <!-- After Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <Widget Id=\"FirstChild\"/> <Widget Id=\"SecondChild\"> <Children> <SomeChild/> </Children> </Widget> <Widget Id=\"ThirdChild\"/> </Children> </OptionsScreenWidget> </Window> </Prefab> Inserting multiple children at the \"root\" level like in the above example can be tidier by using the \"RemoveRootNode\" parameter available with the following attribute types: PrefabExtensionFileName PrefabExtensionText PrefabExtensionXmlNode PrefabExtensionXmlDocument Example of using RemoveRootNode. The result will be the same as the example above: [PrefabExtension(\"ExampleFile\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/OptionsTabToggle\")] internal class ReplaceNodeExamplePatch : PrefabExtensionInsertPatch { public override InsertType Type => InsertType.ReplaceKeepChildren; public override int Index => 1; // Setting \"RemoveRootNode\" to true. [PrefabExtensionText(true)] public string GetContent() => \"<DiscardedRoot><Widget Id=\\\"FirstChild\\\"/><Widget Id=\\\"SecondChild\\\"/><Widget Id=\\\"ThirdChild\\\"/></DiscardedRoot>\"; } PrefabExtensionInsertPatch also supports fetching and inserting xml from a file inside of your module's GUI folder. The biggest advantage of doing this is being able to perform live debugging on your injected patch! Example of appending the content of a file using PrefabExtensionFileName: [PrefabExtension(\"ExampleFile\", \"descendant::OptionsScreenWidget[@Id='Options']/Children/OptionsTabToggle\")] internal class ReplaceNodeExamplePatch : PrefabExtensionInsertPatch { public override InsertType Type => InsertType.Append; // The file should have an extension of type .xml, and be located inside of the GUI folder of your module. // You can include or omit the extension type. I.e. both of the following would work: // ExampleFileInjectedPatch // ExampleFileInjectedPatch.xml [PrefabExtensionFileName] public string PatchFileName => \"ExampleFileInjectedPatch\"; } <!-- ExampleFileInjectedPatch.xml --> <Widget Id=\"InjectedWidget\"> <Children> <SomeOtherChild/> </Children> </Widget> <!-- ExampleFile.xml --> <!-- Before Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle> <Children> <SomeChild/> </Children> </OptionsTabToggle> </Children> </OptionsScreenWidget> </Window> </Prefab> <!-- After Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle> <Children> <SomeChild/> </Children> </OptionsTabToggle> <Widget Id=\"InjectedWidget\"> <Children> <SomeOtherChild/> </Children> </Widget> </Children> </OptionsScreenWidget> </Window> </Prefab>"
  },
  "articles/v2/PrefabExtensionSetAttributePatch.html": {
    "href": "articles/v2/PrefabExtensionSetAttributePatch.html",
    "title": "| UIExtenderEx Documentation",
    "summary": "PrefabExtensionSetAttributePatch Patch that adds or replaces a node's attributes. The target node should be specified by the XPath in the PrefabExtension If the attribute already exists on the target node, it's value will be replaced by the specified value. Otherwise, the new attribute is added with the specified value. Example of adding multiple attributes: [PrefabExtension( \"ExampleFile\", \"descendant::OptionScreenWidget[@Id='Options']/Children/OptionsTabToggle\" )] internal class AddMultipleAttributesExamplePatch : PrefabExtensionSetAttributePatch { public override List<Attribute> Attributes => new() { new Attribute( \"IsVisible\", \"@IsDefaultCraftingMenuVisible\" ), new Attribute( \"IsEnabled\", \"true\" ) }; } <!-- ExampleFile.xml --> <!-- Before Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle IsVisible=\"true\"/> </Children> </OptionsScreenWidget> </Window> </Prefab> <!-- After Patch --> <Prefab> <Window> <OptionsScreenWidget Id=\"Options\"> <Children> <OptionsTabToggle IsVisible=\"@IsDefaultCraftingMenuVisible\" IsEnabled=\"true\"/> </Children> </OptionsScreenWidget> </Window> </Prefab>"
  },
  "articles/v2/ViewModelMixin.html": {
    "href": "articles/v2/ViewModelMixin.html",
    "title": "| UIExtenderEx Documentation",
    "summary": "ViewModelMixin In order to add data to the prefab, you need to add properties to the target datasource class, this is done by making a mixin class, inheriting from BaseViewModelMixin<T> and marking it with ViewModelMixin attribute. This class will be mixed in to the target view model T, making fields and methods accessible in the prefab: [ViewModelMixin] public class OptionsVMMixin : BaseViewModelMixin<OptionsVM> { private readonly ModOptionsVM _modOptions; [DataSourceProperty] public ModOptionsVM ModOptions { get { return _modOptions; } } public OptionsVMMixin(OptionsVM vm) : base(vm) { _modOptions = new ModOptionsVM(); } [DataSourceMethod] public void ExecuteCloseOptions() { ModOptions.ExecuteCancelInternal(false); ViewModel?.ExecuteCloseOptions(); } } The last thing is to call UIExtender.Register and UIExtender.Enable to apply your extensions: public class CustomSubModule : MBSubModuleBase { protected override void OnSubModuleLoad() { base.OnSubModuleLoad(); _extender = new UIExtender(\"ModuleName\"); _extender.Register(typeof(CustomSubModule).Assembly); _extender.Enable(); } } To use the OnRefresh overload you will need to specify for UIExtenderEx the underlying method that acts as the conceptual 'Refresh' method in the ViewModel. For example, MapInfoVM has a method Refresh. If such method exists, specify it in the ViewModelMixin like this: [ViewModelMixin(\"Refresh\")] // or [ViewModelMixin(nameof(MapInfoVM.Refresh))] // if the method is public public class MapInfoMixin : BaseViewModelMixin<MapInfoVM>"
  },
  "index.html": {
    "href": "index.html",
    "title": "Bannerlord.UIExtenderEx | UIExtenderEx Documentation",
    "summary": "Bannerlord.UIExtenderEx A library that enables multiple mods to alter standard game interface. Previously, a fork of UIExtenderLib that was de-forked. Installation This module should be one of the highest in loading order. Ideally, it should be loaded after Bannerlord.Harmony or Bannerlord.ButterLib. For Players This mod is a dependency mod that does not provide anything by itself. You need to additionally install mods that use it. Usage Check the Articles section of our documentation! Current State of AutoGens The game uses two Prefab systems - static (pre-compiled XML) C# prefabs and dynamically serialized XML prefabs. The XML prefabs were introduced with the Early Access. The C# prefabs were introduced in the middle of Early Access. Most likely for Console releases, since they use the Mono runtime. We call AutoGens the XML prefabs that are pre-compiled into C# prefabs. The pre-compilation is achieved by using TaleWorlds.MountAndBlade.GauntletUI.CodeGenerator.exe. It generates C# code based on the XML file. The C# code can then be compiled into an assembly (.dll file) that can be loaded by the game. This has the following benefits: We have ready-to-use prefabs at the very start of the game, removing the serialization step of the XML prefabs, which reduces the load time. We have static (typed) access to anything within the prefab. We do not need to use reflection to get/set data, which, again, speeds up the game. This is particularly noticeable on the Mono runtime. In summary, AutoGens are faster than the raw XML prefabs. The most performance is gained on the Mono runtime. On .NET (Core) the difference is more or less neglectable. UIExtenderEx modifies the raw XML prefabs. Since the game does not use XML prefabs and instead relies on the AutoGens, our modifications will not affect the game. Currently, we just disable AutoGens globally. We are not able to do the pre-compilation at runtime. The issues are mostly not at our side - the CodeGenerator that the game provides doesn't support such scenarios."
  }
}