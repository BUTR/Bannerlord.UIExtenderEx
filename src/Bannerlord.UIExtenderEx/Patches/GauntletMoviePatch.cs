using Bannerlord.BUTR.Shared.Helpers;
using Bannerlord.UIExtenderEx.GauntletUI.CodeGenerator;

using HarmonyLib;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;

using TaleWorlds.GauntletUI;
using TaleWorlds.GauntletUI.Data;
using TaleWorlds.GauntletUI.PrefabSystem;
using TaleWorlds.Library;

namespace Bannerlord.UIExtenderEx.Patches
{
    internal static class GauntletMoviePatch
    {
        private static readonly ConcurrentDictionary<UIExtenderRuntime, List<string>> WidgetNames = new();

        public static void Register(UIExtenderRuntime runtime, string? autoGenWidgetName)
        {
            if (string.IsNullOrEmpty(autoGenWidgetName))
                return;

            WidgetNames.AddOrUpdate(runtime,
                _ => new List<string> { autoGenWidgetName! },
                (_, list) =>
                {
                    list.Add(autoGenWidgetName!);
                    return list;
                });
        }

        public static void Patch(Harmony harmony)
        {
            if (AccessTools.Method(typeof(GauntletMovie), "Load") is { } methodInfo &&
                methodInfo.GetParameters() is { } @params &&
                @params.Any(p => p.Name == "doNotUseGeneratedPrefabs"))
            {
                harmony.Patch(
                    methodInfo,
                    prefix: new HarmonyMethod(AccessTools.Method(typeof(GauntletMoviePatch), nameof(LoadPrefix))));
            }
        }

        private static void LoadPrefix(WidgetFactory widgetFactory, IViewModel datasource, string movieName, ref bool doNotUseGeneratedPrefabs)
        {
            var canGenerateCode = File.Exists(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "TaleWorlds.MountAndBlade.GauntletUI.CodeGenerator.exe"));

            var movies = WidgetNames.Where(kv => kv.Key.PrefabComponent.Enabled).SelectMany(kv => kv.Value);
            if (movies.Contains(movieName))
            {
                if (!canGenerateCode || !OverrideAutoGen(widgetFactory, movieName, datasource))
                {
                    doNotUseGeneratedPrefabs = true;
                    return;
                }
            }
        }

        private static bool OverrideAutoGen(WidgetFactory widgetFactory, string movieName, IViewModel dataSource)
        {
            if (GeneratedPrefabContextHandle.Get(widgetFactory) is not { } wrapper)
                return false;

            if (CreateAutoGenPrefabCreator(movieName, dataSource) is { } prefabCreator)
            {
                WidgetInfo.ReLoad();
                wrapper.OverridePrefab(prefabCreator);
                return true;
            }

            return false;
        }

        private static object? CreateAutoGenPrefabCreator(string prefabName, IViewModel dataSource)
        {
            // Our Harmony patches will make sure that the XML document is patched at the end

            if (UICodeGenerationContextHandle.Create("Bannerlord.UIExtenderEx.AutoGenerated", prefabName) is not { } uiCodeGenerationContext)
                return null;

            // TODO:
            var paths = new List<string> {Path.Combine("GUI", "GauntletUI")}
                .Concat(ModuleInfoHelper.GetLoadedModules().Select(lm => Path.Combine(lm.Folder, "GUI").Replace(BasePath.Name, "").Replace("..\\..\\", "")).Where(Directory.Exists))
                .Select(p => p + "/")
                .ToList();
            uiCodeGenerationContext.Prepare(
                //paths,
                new string[]
                {
                    "GUI/GauntletUI/",
                    "Modules/Native/GUI/",
                    "Modules/SandBoxCore/GUI/",
                    "Modules/SandBox/GUI/"
                },
                new[] { new PrefabDatabindingExtension() }
            );

            var viewModelType = dataSource.GetType();
            uiCodeGenerationContext.AddPrefabVariant(
                prefabName,
                viewModelType.FullName,
                new Dictionary<string, object> { { "DataSourceType", viewModelType } }
            );

            var files = uiCodeGenerationContext.Generate().ToArray();
            var compilation = CSharpCompilation.Create(
                assemblyName: $"Bannerlord.UIExtenderEx.AutoGenerated.{prefabName}",
                syntaxTrees: files.Select(t => CSharpSyntaxTree.ParseText(t.Item2)),
                references: AppDomain.CurrentDomain.GetAssemblies()
                    .Where(a => !a.IsDynamic)
                    .Where(a => !string.IsNullOrEmpty(a.Location) && File.Exists(a.Location))
                    .Select(a => MetadataReference.CreateFromFile(a.Location)),
                options: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary)
            );

            using var msDll = new MemoryStream();
            using var msPdb = new MemoryStream();
            var result = compilation.Emit(msDll, msPdb);
            if (!result.Success)
            {
                var failures = result.Diagnostics.Where(diagnostic => diagnostic.IsWarningAsError ||
                                                                      diagnostic.Severity == DiagnosticSeverity.Error);

                foreach (var diagnostic in failures)
                {
                    Utils.DisplayUserError("{0}: {1}", diagnostic.Id, diagnostic.GetMessage());
                }
            }
            else
            {
                msDll.Seek(0, SeekOrigin.Begin);
                msPdb.Seek(0, SeekOrigin.Begin);
                var dataDll = msDll.ToArray();
                var dataPdb = msPdb.ToArray();
                File.WriteAllBytes(Path.Combine(BasePath.Name, "Modules", "Bannerlord.UIExtenderEx", "AutoGenerated", compilation.AssemblyName + ".dll"), dataDll);
                File.WriteAllBytes(Path.Combine(BasePath.Name, "Modules", "Bannerlord.UIExtenderEx", "AutoGenerated", compilation.AssemblyName + ".pdb"), dataPdb);
                var assembly = Assembly.Load(dataDll);
                var type = assembly.GetType("Bannerlord.UIExtenderEx.AutoGenerated.GeneratedUIPrefabCreator");
                return type is null ? null : Activator.CreateInstance(type);
            }

            return null;
        }
    }
}