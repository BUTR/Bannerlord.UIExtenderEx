using HarmonyLib;
using HarmonyLib.BUTR.Extensions;

using System.Collections.Generic;
using System.IO;
using System.Linq;

using TaleWorlds.GauntletUI.PrefabSystem;
using TaleWorlds.Library;

namespace Bannerlord.UIExtenderEx.GauntletUI.CodeGenerator
{
    internal readonly struct UICodeGenerationContextHandle
    {
        private delegate object UICodeGenerationContextCtorDelegate(string @namespace, string outputFolder);
        private static readonly UICodeGenerationContextCtorDelegate? UICodeGenerationContextCtor;

        private delegate void PrepareDelegate(object instance, IEnumerable<string> resourceLocations, IEnumerable<PrefabExtension> prefabExtensions);
        private static readonly PrepareDelegate? Prepare_;

        private delegate void AddPrefabVariantDelegate(object instance, string prefabName, string variantName, object? variantExtension, Dictionary<string, object> data);
        private static readonly AddPrefabVariantDelegate? AddPrefabVariant_;

        private delegate object UICodeGenerationDatabindingVariantExtensionCtorDelegate();
        private static readonly UICodeGenerationDatabindingVariantExtensionCtorDelegate? UICodeGenerationDatabindingVariantExtensionCtor;

        private delegate void GenerateDelegate(object instance);
        private static readonly GenerateDelegate? Generate_;

        private static readonly string OutputFolder = Path.Combine(BasePath.Name, "Modules", "Bannerlord.UIExtenderEx", "AutoGenerated");
        private static readonly string OutputFolderCSharp = Path.GetFullPath(Path.Combine(OutputFolder, "cs"));

        static UICodeGenerationContextHandle()
        {
            UICodeGenerationContextCtor = AccessTools2.GetDelegate<UICodeGenerationContextCtorDelegate>(AccessTools.Constructor(
                AccessTools.TypeByName("TaleWorlds.MountAndBlade.GauntletUI.CodeGenerator.UICodeGenerationContext"),
                new[] {typeof(string), typeof(string)})
            );

            Prepare_ = AccessTools2.GetDelegateObjectInstance<PrepareDelegate>(
                AccessTools.Method("TaleWorlds.MountAndBlade.GauntletUI.CodeGenerator.UICodeGenerationContext:Prepare"));

            AddPrefabVariant_ = AccessTools2.GetDelegateObjectInstance<AddPrefabVariantDelegate>(
                AccessTools.Method("TaleWorlds.MountAndBlade.GauntletUI.CodeGenerator.UICodeGenerationContext:AddPrefabVariant"));

            UICodeGenerationDatabindingVariantExtensionCtor = AccessTools2.GetDelegate<UICodeGenerationDatabindingVariantExtensionCtorDelegate>(
                AccessTools.Constructor(AccessTools.TypeByName("TaleWorlds.MountAndBlade.GauntletUI.CodeGenerator.UICodeGenerationDatabindingVariantExtension")));

            Generate_ = AccessTools2.GetDelegateObjectInstance<GenerateDelegate>(
                AccessTools.Method("TaleWorlds.MountAndBlade.GauntletUI.CodeGenerator.UICodeGenerationContext:Generate"));
        }

        public static UICodeGenerationContextHandle? Create(string @namespace, string prefabName) =>
            UICodeGenerationContextCtor?.Invoke(@namespace, Path.Combine(OutputFolderCSharp, prefabName)) is { } handle
                ? new UICodeGenerationContextHandle(handle, Path.Combine(OutputFolderCSharp, prefabName))
                : null;

        private readonly object _uiCodeGenerationContext;
        private readonly string _csOutputFolder;

        public UICodeGenerationContextHandle(object uiCodeGenerationContext, string csOutputFolder)
        {
            _uiCodeGenerationContext = uiCodeGenerationContext;
            _csOutputFolder = csOutputFolder;
        }

        public void Prepare(IEnumerable<string> resourceLocations, IEnumerable<PrefabExtension> prefabExtensions)
        {
            Prepare_?.Invoke(_uiCodeGenerationContext, resourceLocations, prefabExtensions);
        }

        public void AddPrefabVariant(string prefabName, string? variantName, Dictionary<string, object> data)
        {
            var variantExtension = UICodeGenerationDatabindingVariantExtensionCtor?.Invoke();
            AddPrefabVariant_?.Invoke(_uiCodeGenerationContext, prefabName, variantName ?? "Default", variantExtension, data);
        }

        public List<(string Name, string Content)> Generate()
        {
            if (!Directory.Exists(OutputFolder))
                Directory.CreateDirectory(OutputFolder);

            if (!Directory.Exists(OutputFolderCSharp))
                Directory.CreateDirectory(OutputFolderCSharp);

            if (!Directory.Exists(_csOutputFolder))
                Directory.CreateDirectory(_csOutputFolder);

            Generate_?.Invoke(_uiCodeGenerationContext);
            return Directory.GetFiles(_csOutputFolder, "*.cs").Select(f => (Path.GetFileName(f), File.ReadAllText(f))).ToList();
        }
    }
}